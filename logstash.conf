################################################################################
# ironport logstash pipeline
# input -> syslog
# filter -> grok regex only for messages that contains MID
# output -> local file
#        -> redis
################################################################################

input {
  udp {
    port => 514
    type => syslog
  }
  tcp {
    port => 514
    type => syslog
  }
}


filter {
  mutate {
    remove_field => [ "host", "tags", "@version", "port", "type"]
  }
  grok {
    match =>{ "message" => [
      # ICID
      "Info: Start MID %{NUMBER:MID} ICID %{NUMBER:ICID}$",
      # Delivery
      "MID %{NUMBER:MID} (?<Action>queued for delivery)",
      # From
      "MID %{NUMBER:MID} to RID %{DATA} \[\('received', 'from %{HOSTNAME:HOSTNAME} \(\[%{IP:ip}",
      # Dropped
      "MID %{NUMBER:MID} (?<Action>Dropped) by content filter %{QS:Content_Filter}",
      # quarantine
      "MID %{NUMBER:MID} enqueued for transfer to centralized (?<Action>quarantine) [\"']*%{DATA:Action_Desc}[\"']* \(%{DATA:Content_Filter}\)",
      # Notify
      "MID %{NUMBER:MID} was generated based on MID %{NUMBER:Related_MID} by %{DATA:Action_Desc} filter %{QS:Content_Filter}",
      # Rewritten
      "MID %{NUMBER:MID} (?<Action>rewritten) to MID %{NUMBER:Related_MID} by %{USERNAME:Action_Desc}",
      # Custom
      "MID %{NUMBER:MID} Custom Log Entry: %{GREEDYDATA:Content_Filter}",
      # OutbreakFilters
      "MID %{NUMBER:MID} Outbreak Filters: verdict %{WORD:OutbreakFilter}",
      # CASE
      "MID %{NUMBER:MID}%{DATA}using engine: CASE %{GREEDYDATA:CASE}",
      # GRAYMAIL
      "MID %{NUMBER:MID}%{DATA}using engine: GRAYMAIL %{GREEDYDATA:GRAYMAIL}",
      # Antivirus
      "MID %{NUMBER:MID}%{DATA}interim AV verdict using %{WORD} %{GREEDYDATA:Antivirus}",
      # LDAP
      "(?<Action>LDAP: Drop) query .* MID %{NUMBER:MID} RID \d* address (?<LDAP_Drop>.*)",
      # DMARK
      "MID %{NUMBER:MID} DMARC: Verification %{WORD:DMARK}",
      "MID %{NUMBER:MID} DMARC: (?<DMARK_Detail>Message from domain .*)",
      # SPF
      "MID %{NUMBER:MID} SPF: mailfrom identity %{DATA} %{WORD:SPF}",
      # DKIM
      "MID %{NUMBER:MID} DKIM: (?<DKIM_Detail>(%{WORD:DKIM}) .*)",
      # Attachments
      "MID %{NUMBER:MID} attachment %{QS:Attachments}",
      # Subject
      "MID %{NUMBER:MID} Subject %{QS:Subject}",
      # MessageID
      "MID %{NUMBER:MID} Message-ID %{QS:MessageID}",
      # To
      "MID %{NUMBER:MID} ICID %{NUMBER} RID \d+ To: \<(?<To>.*)\>",
      # From
      "MID %{NUMBER:MID} ICID %{NUMBER} From: \<(?<From>.*)\>",
      # SDR
      "MID %{NUMBER:MID} SDR: Consolidated Sender Reputation: %{WORD:SenderReputation}, Threat Category: (?<ThreatCategory>N\/A|.*?)[\.\,] (?<SuspectedDomains>:Suspected Domain\(s\) : (.*)\. )?Youngest Domain Age: (?<DomainAge>.*)",
      # Others
      "MID %{NUMBER:MID} %{GREEDYDATA:Other}"
      ]
    }
    add_field => {"type" => "match"}
  }
}

output {
  if "_grokparsefailure" in [tags] {
    file {
        path => "/var/log/fail_ironport"
        codec => line { format => "%{message}"}
      }
    # You can send the logs that don't have MID info directly to the SIEM here
    }

  else {
    #stdout { codec => rubydebug }
    file {
      path => "/var/log/ironport"
      }
    redis {
      key => "ironport"
      data_type => "list"
    }
  }
}
